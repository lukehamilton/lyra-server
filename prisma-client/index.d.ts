// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  post: (where?: PostWhereInput) => Promise<boolean>;
  section: (where?: SectionWhereInput) => Promise<boolean>;
  signedUpload: (where?: SignedUploadWhereInput) => Promise<boolean>;
  topic: (where?: TopicWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  section: (where: SectionWhereUniqueInput) => SectionNullablePromise;
  sections: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Section>;
  sectionsConnection: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SectionConnectionPromise;
  signedUpload: (
    where: SignedUploadWhereUniqueInput
  ) => SignedUploadNullablePromise;
  signedUploads: (args?: {
    where?: SignedUploadWhereInput;
    orderBy?: SignedUploadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SignedUpload>;
  signedUploadsConnection: (args?: {
    where?: SignedUploadWhereInput;
    orderBy?: SignedUploadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SignedUploadConnectionPromise;
  topic: (where: TopicWhereUniqueInput) => TopicNullablePromise;
  topics: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Topic>;
  topicsConnection: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TopicConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createSection: (data: SectionCreateInput) => SectionPromise;
  updateSection: (args: {
    data: SectionUpdateInput;
    where: SectionWhereUniqueInput;
  }) => SectionPromise;
  updateManySections: (args: {
    data: SectionUpdateManyMutationInput;
    where?: SectionWhereInput;
  }) => BatchPayloadPromise;
  upsertSection: (args: {
    where: SectionWhereUniqueInput;
    create: SectionCreateInput;
    update: SectionUpdateInput;
  }) => SectionPromise;
  deleteSection: (where: SectionWhereUniqueInput) => SectionPromise;
  deleteManySections: (where?: SectionWhereInput) => BatchPayloadPromise;
  createSignedUpload: (data: SignedUploadCreateInput) => SignedUploadPromise;
  updateSignedUpload: (args: {
    data: SignedUploadUpdateInput;
    where: SignedUploadWhereUniqueInput;
  }) => SignedUploadPromise;
  updateManySignedUploads: (args: {
    data: SignedUploadUpdateManyMutationInput;
    where?: SignedUploadWhereInput;
  }) => BatchPayloadPromise;
  upsertSignedUpload: (args: {
    where: SignedUploadWhereUniqueInput;
    create: SignedUploadCreateInput;
    update: SignedUploadUpdateInput;
  }) => SignedUploadPromise;
  deleteSignedUpload: (
    where: SignedUploadWhereUniqueInput
  ) => SignedUploadPromise;
  deleteManySignedUploads: (
    where?: SignedUploadWhereInput
  ) => BatchPayloadPromise;
  createTopic: (data: TopicCreateInput) => TopicPromise;
  updateTopic: (args: {
    data: TopicUpdateInput;
    where: TopicWhereUniqueInput;
  }) => TopicPromise;
  updateManyTopics: (args: {
    data: TopicUpdateManyMutationInput;
    where?: TopicWhereInput;
  }) => BatchPayloadPromise;
  upsertTopic: (args: {
    where: TopicWhereUniqueInput;
    create: TopicCreateInput;
    update: TopicUpdateInput;
  }) => TopicPromise;
  deleteTopic: (where: TopicWhereUniqueInput) => TopicPromise;
  deleteManyTopics: (where?: TopicWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  section: (
    where?: SectionSubscriptionWhereInput
  ) => SectionSubscriptionPayloadSubscription;
  signedUpload: (
    where?: SignedUploadSubscriptionWhereInput
  ) => SignedUploadSubscriptionPayloadSubscription;
  topic: (
    where?: TopicSubscriptionWhereInput
  ) => TopicSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "USER";

export type TopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "followersCount_ASC"
  | "followersCount_DESC"
  | "postsCount_ASC"
  | "postsCount_DESC"
  | "trending_ASC"
  | "trending_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "link_ASC"
  | "link_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "description_ASC"
  | "description_DESC"
  | "tagline_ASC"
  | "tagline_DESC"
  | "votesCount_ASC"
  | "votesCount_DESC"
  | "commentsCount_ASC"
  | "commentsCount_DESC"
  | "day_ASC"
  | "day_DESC"
  | "featured_ASC"
  | "featured_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "auth0id_ASC"
  | "auth0id_DESC"
  | "identity_ASC"
  | "identity_DESC"
  | "privateKey_ASC"
  | "privateKey_DESC"
  | "address_ASC"
  | "address_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostType = "PRODUCT" | "LINK";

export type SectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "date_ASC"
  | "date_DESC";

export type SignedUploadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "signedRequest_ASC"
  | "signedRequest_DESC"
  | "url_ASC"
  | "url_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface VoteUpdateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  slug?: Maybe<String>;
}>;

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  auth0id?: Maybe<String>;
  auth0id_not?: Maybe<String>;
  auth0id_in?: Maybe<String[] | String>;
  auth0id_not_in?: Maybe<String[] | String>;
  auth0id_lt?: Maybe<String>;
  auth0id_lte?: Maybe<String>;
  auth0id_gt?: Maybe<String>;
  auth0id_gte?: Maybe<String>;
  auth0id_contains?: Maybe<String>;
  auth0id_not_contains?: Maybe<String>;
  auth0id_starts_with?: Maybe<String>;
  auth0id_not_starts_with?: Maybe<String>;
  auth0id_ends_with?: Maybe<String>;
  auth0id_not_ends_with?: Maybe<String>;
  identity?: Maybe<String>;
  identity_not?: Maybe<String>;
  identity_in?: Maybe<String[] | String>;
  identity_not_in?: Maybe<String[] | String>;
  identity_lt?: Maybe<String>;
  identity_lte?: Maybe<String>;
  identity_gt?: Maybe<String>;
  identity_gte?: Maybe<String>;
  identity_contains?: Maybe<String>;
  identity_not_contains?: Maybe<String>;
  identity_starts_with?: Maybe<String>;
  identity_not_starts_with?: Maybe<String>;
  identity_ends_with?: Maybe<String>;
  identity_not_ends_with?: Maybe<String>;
  privateKey?: Maybe<String>;
  privateKey_not?: Maybe<String>;
  privateKey_in?: Maybe<String[] | String>;
  privateKey_not_in?: Maybe<String[] | String>;
  privateKey_lt?: Maybe<String>;
  privateKey_lte?: Maybe<String>;
  privateKey_gt?: Maybe<String>;
  privateKey_gte?: Maybe<String>;
  privateKey_contains?: Maybe<String>;
  privateKey_not_contains?: Maybe<String>;
  privateKey_starts_with?: Maybe<String>;
  privateKey_not_starts_with?: Maybe<String>;
  privateKey_ends_with?: Maybe<String>;
  privateKey_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  followedTopics_every?: Maybe<TopicWhereInput>;
  followedTopics_some?: Maybe<TopicWhereInput>;
  followedTopics_none?: Maybe<TopicWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<PostType>;
  type_not?: Maybe<PostType>;
  type_in?: Maybe<PostType[] | PostType>;
  type_not_in?: Maybe<PostType[] | PostType>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  tagline?: Maybe<String>;
  tagline_not?: Maybe<String>;
  tagline_in?: Maybe<String[] | String>;
  tagline_not_in?: Maybe<String[] | String>;
  tagline_lt?: Maybe<String>;
  tagline_lte?: Maybe<String>;
  tagline_gt?: Maybe<String>;
  tagline_gte?: Maybe<String>;
  tagline_contains?: Maybe<String>;
  tagline_not_contains?: Maybe<String>;
  tagline_starts_with?: Maybe<String>;
  tagline_not_starts_with?: Maybe<String>;
  tagline_ends_with?: Maybe<String>;
  tagline_not_ends_with?: Maybe<String>;
  votesCount?: Maybe<Int>;
  votesCount_not?: Maybe<Int>;
  votesCount_in?: Maybe<Int[] | Int>;
  votesCount_not_in?: Maybe<Int[] | Int>;
  votesCount_lt?: Maybe<Int>;
  votesCount_lte?: Maybe<Int>;
  votesCount_gt?: Maybe<Int>;
  votesCount_gte?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  day?: Maybe<String>;
  day_not?: Maybe<String>;
  day_in?: Maybe<String[] | String>;
  day_not_in?: Maybe<String[] | String>;
  day_lt?: Maybe<String>;
  day_lte?: Maybe<String>;
  day_gt?: Maybe<String>;
  day_gte?: Maybe<String>;
  day_contains?: Maybe<String>;
  day_not_contains?: Maybe<String>;
  day_starts_with?: Maybe<String>;
  day_not_starts_with?: Maybe<String>;
  day_ends_with?: Maybe<String>;
  day_not_ends_with?: Maybe<String>;
  featured?: Maybe<Boolean>;
  featured_not?: Maybe<Boolean>;
  topics_every?: Maybe<TopicWhereInput>;
  topics_some?: Maybe<TopicWhereInput>;
  topics_none?: Maybe<TopicWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowedTopicsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowedTopicsDataInput;
  create: UserCreateWithoutFollowedTopicsInput;
}

export interface TopicWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  followersCount?: Maybe<Int>;
  followersCount_not?: Maybe<Int>;
  followersCount_in?: Maybe<Int[] | Int>;
  followersCount_not_in?: Maybe<Int[] | Int>;
  followersCount_lt?: Maybe<Int>;
  followersCount_lte?: Maybe<Int>;
  followersCount_gt?: Maybe<Int>;
  followersCount_gte?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  postsCount_not?: Maybe<Int>;
  postsCount_in?: Maybe<Int[] | Int>;
  postsCount_not_in?: Maybe<Int[] | Int>;
  postsCount_lt?: Maybe<Int>;
  postsCount_lte?: Maybe<Int>;
  postsCount_gt?: Maybe<Int>;
  postsCount_gte?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  trending_not?: Maybe<Boolean>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  followedBy_every?: Maybe<UserWhereInput>;
  followedBy_some?: Maybe<UserWhereInput>;
  followedBy_none?: Maybe<UserWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  OR?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  NOT?: Maybe<TopicWhereInput[] | TopicWhereInput>;
}

export interface TopicCreateWithoutFollowedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  slug: String;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutTopicsInput>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface TopicUpdateManyDataInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
}

export interface PostCreateManyWithoutTopicsInput {
  create?: Maybe<PostCreateWithoutTopicsInput[] | PostCreateWithoutTopicsInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  auth0id?: Maybe<String>;
  auth0id_not?: Maybe<String>;
  auth0id_in?: Maybe<String[] | String>;
  auth0id_not_in?: Maybe<String[] | String>;
  auth0id_lt?: Maybe<String>;
  auth0id_lte?: Maybe<String>;
  auth0id_gt?: Maybe<String>;
  auth0id_gte?: Maybe<String>;
  auth0id_contains?: Maybe<String>;
  auth0id_not_contains?: Maybe<String>;
  auth0id_starts_with?: Maybe<String>;
  auth0id_not_starts_with?: Maybe<String>;
  auth0id_ends_with?: Maybe<String>;
  auth0id_not_ends_with?: Maybe<String>;
  identity?: Maybe<String>;
  identity_not?: Maybe<String>;
  identity_in?: Maybe<String[] | String>;
  identity_not_in?: Maybe<String[] | String>;
  identity_lt?: Maybe<String>;
  identity_lte?: Maybe<String>;
  identity_gt?: Maybe<String>;
  identity_gte?: Maybe<String>;
  identity_contains?: Maybe<String>;
  identity_not_contains?: Maybe<String>;
  identity_starts_with?: Maybe<String>;
  identity_not_starts_with?: Maybe<String>;
  identity_ends_with?: Maybe<String>;
  identity_not_ends_with?: Maybe<String>;
  privateKey?: Maybe<String>;
  privateKey_not?: Maybe<String>;
  privateKey_in?: Maybe<String[] | String>;
  privateKey_not_in?: Maybe<String[] | String>;
  privateKey_lt?: Maybe<String>;
  privateKey_lte?: Maybe<String>;
  privateKey_gt?: Maybe<String>;
  privateKey_gte?: Maybe<String>;
  privateKey_contains?: Maybe<String>;
  privateKey_not_contains?: Maybe<String>;
  privateKey_starts_with?: Maybe<String>;
  privateKey_not_starts_with?: Maybe<String>;
  privateKey_ends_with?: Maybe<String>;
  privateKey_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface PostCreateWithoutTopicsInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<PostType>;
  name: String;
  slug: String;
  link?: Maybe<String>;
  thumbnail: String;
  description: String;
  tagline?: Maybe<String>;
  votesCount: Int;
  commentsCount: Int;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
  votes?: Maybe<VoteCreateManyWithoutPostInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VoteCreateManyWithoutPostInput {
  create?: Maybe<VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface SignedUploadSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SignedUploadWhereInput>;
  AND?: Maybe<
    SignedUploadSubscriptionWhereInput[] | SignedUploadSubscriptionWhereInput
  >;
  OR?: Maybe<
    SignedUploadSubscriptionWhereInput[] | SignedUploadSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SignedUploadSubscriptionWhereInput[] | SignedUploadSubscriptionWhereInput
  >;
}

export interface VoteCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutVotesInput;
}

export type SectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  date?: Maybe<String>;
}>;

export interface PostUpdateInput {
  type?: Maybe<PostType>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
  link?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  tagline?: Maybe<String>;
  votesCount?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  votes?: Maybe<VoteUpdateManyWithoutPostInput>;
}

export interface SectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  AND?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  OR?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  NOT?: Maybe<SectionWhereInput[] | SectionWhereInput>;
}

export interface TopicUpdateManyWithoutPostsInput {
  create?: Maybe<TopicCreateWithoutPostsInput[] | TopicCreateWithoutPostsInput>;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutPostsInput[]
    | TopicUpdateWithWhereUniqueWithoutPostsInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutPostsInput[]
    | TopicUpsertWithWhereUniqueWithoutPostsInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  auth0id?: Maybe<String>;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
}

export interface TopicUpdateWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutPostsDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name: String;
  avatar?: Maybe<String>;
  auth0id: String;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
  followedTopics?: Maybe<TopicCreateManyWithoutFollowedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
}

export interface TopicUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  followedBy?: Maybe<UserUpdateManyWithoutFollowedTopicsInput>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface TopicUpdateManyMutationInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
}

export interface UserUpdateManyWithoutFollowedTopicsInput {
  create?: Maybe<
    | UserCreateWithoutFollowedTopicsInput[]
    | UserCreateWithoutFollowedTopicsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowedTopicsInput[]
    | UserUpdateWithWhereUniqueWithoutFollowedTopicsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowedTopicsInput[]
    | UserUpsertWithWhereUniqueWithoutFollowedTopicsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutTopicsInput>;
  followedBy?: Maybe<UserUpdateManyWithoutFollowedTopicsInput>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowedTopicsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowedTopicsDataInput;
}

export interface SignedUploadUpdateManyMutationInput {
  signedRequest?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserUpdateWithoutFollowedTopicsDataInput {
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  auth0id?: Maybe<String>;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
}

export type TopicWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  slug?: Maybe<String>;
}>;

export interface PostUpdateManyMutationInput {
  type?: Maybe<PostType>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
  link?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  tagline?: Maybe<String>;
  votesCount?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
}

export interface SectionUpdateManyMutationInput {
  date?: Maybe<String>;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  auth0id?: Maybe<String>;
}>;

export interface VoteUpdateWithoutUserDataInput {
  post?: Maybe<PostUpdateOneRequiredWithoutVotesInput>;
}

export interface PostUpdateWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput;
  data: PostUpdateDataInput;
}

export interface PostUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<PostCreateWithoutVotesInput>;
  update?: Maybe<PostUpdateWithoutVotesDataInput>;
  upsert?: Maybe<PostUpsertWithoutVotesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateWithoutVotesDataInput {
  type?: Maybe<PostType>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
  link?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  tagline?: Maybe<String>;
  votesCount?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
}

export interface PostCreateManyInput {
  create?: Maybe<PostCreateInput[] | PostCreateInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostUpsertWithoutVotesInput {
  update: PostUpdateWithoutVotesDataInput;
  create: PostCreateWithoutVotesInput;
}

export interface TopicCreateManyWithoutPostsInput {
  create?: Maybe<TopicCreateWithoutPostsInput[] | TopicCreateWithoutPostsInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface UserCreateManyWithoutFollowedTopicsInput {
  create?: Maybe<
    | UserCreateWithoutFollowedTopicsInput[]
    | UserCreateWithoutFollowedTopicsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface TopicUpsertWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutPostsDataInput;
  create: TopicCreateWithoutPostsInput;
}

export interface VoteCreateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteUpsertWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateDataInput;
  create: VoteCreateInput;
}

export interface PostCreateOneWithoutVotesInput {
  create?: Maybe<PostCreateWithoutVotesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface VoteCreateManyInput {
  create?: Maybe<VoteCreateInput[] | VoteCreateInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  auth0id?: Maybe<String>;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
}

export interface TopicCreateManyWithoutFollowedByInput {
  create?: Maybe<
    TopicCreateWithoutFollowedByInput[] | TopicCreateWithoutFollowedByInput
  >;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface VoteUpdateManyInput {
  create?: Maybe<VoteCreateInput[] | VoteCreateInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueNestedInput[]
    | VoteUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueNestedInput[]
    | VoteUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface TopicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TopicWhereInput>;
  AND?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  OR?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  NOT?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
}

export interface VoteUpdateWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateDataInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface VoteUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutVotesInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  auth0id?: Maybe<String>;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
  followedTopics?: Maybe<TopicUpdateManyWithoutFollowedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  update?: Maybe<UserUpdateWithoutVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SignedUploadWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  signedRequest?: Maybe<String>;
  signedRequest_not?: Maybe<String>;
  signedRequest_in?: Maybe<String[] | String>;
  signedRequest_not_in?: Maybe<String[] | String>;
  signedRequest_lt?: Maybe<String>;
  signedRequest_lte?: Maybe<String>;
  signedRequest_gt?: Maybe<String>;
  signedRequest_gte?: Maybe<String>;
  signedRequest_contains?: Maybe<String>;
  signedRequest_not_contains?: Maybe<String>;
  signedRequest_starts_with?: Maybe<String>;
  signedRequest_not_starts_with?: Maybe<String>;
  signedRequest_ends_with?: Maybe<String>;
  signedRequest_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<SignedUploadWhereInput[] | SignedUploadWhereInput>;
  OR?: Maybe<SignedUploadWhereInput[] | SignedUploadWhereInput>;
  NOT?: Maybe<SignedUploadWhereInput[] | SignedUploadWhereInput>;
}

export interface UserUpdateWithoutVotesDataInput {
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  auth0id?: Maybe<String>;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
  followedTopics?: Maybe<TopicUpdateManyWithoutFollowedByInput>;
}

export interface SignedUploadUpdateInput {
  signedRequest?: Maybe<String>;
  url?: Maybe<String>;
}

export interface TopicUpdateManyWithoutFollowedByInput {
  create?: Maybe<
    TopicCreateWithoutFollowedByInput[] | TopicCreateWithoutFollowedByInput
  >;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutFollowedByInput[]
    | TopicUpdateWithWhereUniqueWithoutFollowedByInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutFollowedByInput[]
    | TopicUpsertWithWhereUniqueWithoutFollowedByInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpsertWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput;
  update: PostUpdateDataInput;
  create: PostCreateInput;
}

export interface TopicUpdateWithWhereUniqueWithoutFollowedByInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutFollowedByDataInput;
}

export interface PostUpdateManyInput {
  create?: Maybe<PostCreateInput[] | PostCreateInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueNestedInput[]
    | PostUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueNestedInput[]
    | PostUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateWithoutFollowedByDataInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutTopicsInput>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface SectionCreateInput {
  id?: Maybe<ID_Input>;
  date: String;
  posts?: Maybe<PostCreateManyInput>;
}

export interface PostUpdateManyWithoutTopicsInput {
  create?: Maybe<PostCreateWithoutTopicsInput[] | PostCreateWithoutTopicsInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutTopicsInput[]
    | PostUpdateWithWhereUniqueWithoutTopicsInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutTopicsInput[]
    | PostUpsertWithWhereUniqueWithoutTopicsInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface TopicCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  slug: String;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  followedBy?: Maybe<UserCreateManyWithoutFollowedTopicsInput>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface PostUpdateWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutTopicsDataInput;
}

export interface VoteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutVotesInput;
}

export interface PostUpdateWithoutTopicsDataInput {
  type?: Maybe<PostType>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
  link?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  tagline?: Maybe<String>;
  votesCount?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
  votes?: Maybe<VoteUpdateManyWithoutPostInput>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutVotesInput;
  post: PostCreateOneWithoutVotesInput;
}

export interface VoteUpdateManyWithoutPostInput {
  create?: Maybe<VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutPostInput[]
    | VoteUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutPostInput[]
    | VoteUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutPostDataInput;
}

export interface VoteUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutVotesInput>;
}

export interface VoteUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface TopicCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  slug: String;
  description?: Maybe<String>;
  image?: Maybe<String>;
  followersCount?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutTopicsInput>;
  followedBy?: Maybe<UserCreateManyWithoutFollowedTopicsInput>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface VoteUpsertWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutPostDataInput;
  create: VoteCreateWithoutPostInput;
}

export interface PostUpdateDataInput {
  type?: Maybe<PostType>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
  link?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  tagline?: Maybe<String>;
  votesCount?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  votes?: Maybe<VoteUpdateManyWithoutPostInput>;
}

export interface PostUpsertWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutTopicsDataInput;
  create: PostCreateWithoutTopicsInput;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<PostType>;
  name: String;
  slug: String;
  link?: Maybe<String>;
  thumbnail: String;
  description: String;
  tagline?: Maybe<String>;
  votesCount: Int;
  commentsCount: Int;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
  votes?: Maybe<VoteCreateManyWithoutPostInput>;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<PostType>;
  type_not?: Maybe<PostType>;
  type_in?: Maybe<PostType[] | PostType>;
  type_not_in?: Maybe<PostType[] | PostType>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  tagline?: Maybe<String>;
  tagline_not?: Maybe<String>;
  tagline_in?: Maybe<String[] | String>;
  tagline_not_in?: Maybe<String[] | String>;
  tagline_lt?: Maybe<String>;
  tagline_lte?: Maybe<String>;
  tagline_gt?: Maybe<String>;
  tagline_gte?: Maybe<String>;
  tagline_contains?: Maybe<String>;
  tagline_not_contains?: Maybe<String>;
  tagline_starts_with?: Maybe<String>;
  tagline_not_starts_with?: Maybe<String>;
  tagline_ends_with?: Maybe<String>;
  tagline_not_ends_with?: Maybe<String>;
  votesCount?: Maybe<Int>;
  votesCount_not?: Maybe<Int>;
  votesCount_in?: Maybe<Int[] | Int>;
  votesCount_not_in?: Maybe<Int[] | Int>;
  votesCount_lt?: Maybe<Int>;
  votesCount_lte?: Maybe<Int>;
  votesCount_gt?: Maybe<Int>;
  votesCount_gte?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  day?: Maybe<String>;
  day_not?: Maybe<String>;
  day_in?: Maybe<String[] | String>;
  day_not_in?: Maybe<String[] | String>;
  day_lt?: Maybe<String>;
  day_lte?: Maybe<String>;
  day_gt?: Maybe<String>;
  day_gte?: Maybe<String>;
  day_contains?: Maybe<String>;
  day_not_contains?: Maybe<String>;
  day_starts_with?: Maybe<String>;
  day_not_starts_with?: Maybe<String>;
  day_ends_with?: Maybe<String>;
  day_not_ends_with?: Maybe<String>;
  featured?: Maybe<Boolean>;
  featured_not?: Maybe<Boolean>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<PostType>;
  name: String;
  slug: String;
  link?: Maybe<String>;
  thumbnail: String;
  description: String;
  tagline?: Maybe<String>;
  votesCount: Int;
  commentsCount: Int;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface SectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SectionWhereInput>;
  AND?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  OR?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  NOT?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
}

export interface TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput;
  data: TopicUpdateManyDataInput;
}

export interface TopicScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  followersCount?: Maybe<Int>;
  followersCount_not?: Maybe<Int>;
  followersCount_in?: Maybe<Int[] | Int>;
  followersCount_not_in?: Maybe<Int[] | Int>;
  followersCount_lt?: Maybe<Int>;
  followersCount_lte?: Maybe<Int>;
  followersCount_gt?: Maybe<Int>;
  followersCount_gte?: Maybe<Int>;
  postsCount?: Maybe<Int>;
  postsCount_not?: Maybe<Int>;
  postsCount_in?: Maybe<Int[] | Int>;
  postsCount_not_in?: Maybe<Int[] | Int>;
  postsCount_lt?: Maybe<Int>;
  postsCount_lte?: Maybe<Int>;
  postsCount_gt?: Maybe<Int>;
  postsCount_gte?: Maybe<Int>;
  trending?: Maybe<Boolean>;
  trending_not?: Maybe<Boolean>;
  AND?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  OR?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  NOT?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
}

export interface TopicUpsertWithWhereUniqueWithoutFollowedByInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutFollowedByDataInput;
  create: TopicCreateWithoutFollowedByInput;
}

export interface PostUpdateManyDataInput {
  type?: Maybe<PostType>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
  link?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  tagline?: Maybe<String>;
  votesCount?: Maybe<Int>;
  commentsCount?: Maybe<Int>;
  day?: Maybe<String>;
  featured?: Maybe<Boolean>;
}

export type SignedUploadWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name: String;
  avatar?: Maybe<String>;
  auth0id: String;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
  followedTopics?: Maybe<TopicCreateManyWithoutFollowedByInput>;
}

export interface UserCreateWithoutFollowedTopicsInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  name: String;
  avatar?: Maybe<String>;
  auth0id: String;
  identity?: Maybe<String>;
  privateKey?: Maybe<String>;
  address?: Maybe<String>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
}

export interface SectionUpdateInput {
  date?: Maybe<String>;
  posts?: Maybe<PostUpdateManyInput>;
}

export interface SignedUploadCreateInput {
  id?: Maybe<ID_Input>;
  signedRequest?: Maybe<String>;
  url?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SectionEdge {
  node: Section;
  cursor: String;
}

export interface SectionEdgePromise extends Promise<SectionEdge>, Fragmentable {
  node: <T = SectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SectionEdgeSubscription
  extends Promise<AsyncIterator<SectionEdge>>,
    Fragmentable {
  node: <T = SectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  email?: String;
  role?: Role;
  name: String;
  avatar?: String;
  auth0id: String;
  identity?: String;
  privateKey?: String;
  address?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  auth0id: () => Promise<String>;
  identity: () => Promise<String>;
  privateKey: () => Promise<String>;
  address: () => Promise<String>;
  followedTopics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  auth0id: () => Promise<AsyncIterator<String>>;
  identity: () => Promise<AsyncIterator<String>>;
  privateKey: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  followedTopics: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  auth0id: () => Promise<String>;
  identity: () => Promise<String>;
  privateKey: () => Promise<String>;
  address: () => Promise<String>;
  followedTopics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SectionConnection {
  pageInfo: PageInfo;
  edges: SectionEdge[];
}

export interface SectionConnectionPromise
  extends Promise<SectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SectionEdge>>() => T;
  aggregate: <T = AggregateSectionPromise>() => T;
}

export interface SectionConnectionSubscription
  extends Promise<AsyncIterator<SectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSectionSubscription>() => T;
}

export interface Topic {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  name: String;
  slug: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
}

export interface TopicPromise extends Promise<Topic>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  followersCount: () => Promise<Int>;
  postsCount: () => Promise<Int>;
  trending: () => Promise<Boolean>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followedBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TopicSubscription
  extends Promise<AsyncIterator<Topic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  followersCount: () => Promise<AsyncIterator<Int>>;
  postsCount: () => Promise<AsyncIterator<Int>>;
  trending: () => Promise<AsyncIterator<Boolean>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followedBy: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TopicNullablePromise
  extends Promise<Topic | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  followersCount: () => Promise<Int>;
  postsCount: () => Promise<Int>;
  trending: () => Promise<Boolean>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followedBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface Vote {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  email?: String;
  role?: Role;
  name: String;
  avatar?: String;
  auth0id: String;
  identity?: String;
  privateKey?: String;
  address?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  auth0id: () => Promise<String>;
  identity: () => Promise<String>;
  privateKey: () => Promise<String>;
  address: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  auth0id: () => Promise<AsyncIterator<String>>;
  identity: () => Promise<AsyncIterator<String>>;
  privateKey: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Section {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  date: String;
}

export interface SectionPromise extends Promise<Section>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  date: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SectionSubscription
  extends Promise<AsyncIterator<Section>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  date: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SectionNullablePromise
  extends Promise<Section | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  date: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface TopicEdge {
  node: Topic;
  cursor: String;
}

export interface TopicEdgePromise extends Promise<TopicEdge>, Fragmentable {
  node: <T = TopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TopicEdgeSubscription
  extends Promise<AsyncIterator<TopicEdge>>,
    Fragmentable {
  node: <T = TopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  type?: PostType;
  name: String;
  slug: String;
  link?: String;
  thumbnail: String;
  description: String;
  tagline?: String;
  votesCount: Int;
  commentsCount: Int;
  day?: String;
  featured?: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<PostType>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  link: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  tagline: () => Promise<String>;
  votesCount: () => Promise<Int>;
  commentsCount: () => Promise<Int>;
  day: () => Promise<String>;
  featured: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<PostType>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  tagline: () => Promise<AsyncIterator<String>>;
  votesCount: () => Promise<AsyncIterator<Int>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<String>>;
  featured: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateSignedUpload {
  count: Int;
}

export interface AggregateSignedUploadPromise
  extends Promise<AggregateSignedUpload>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSignedUploadSubscription
  extends Promise<AsyncIterator<AggregateSignedUpload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SignedUploadConnection {
  pageInfo: PageInfo;
  edges: SignedUploadEdge[];
}

export interface SignedUploadConnectionPromise
  extends Promise<SignedUploadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SignedUploadEdge>>() => T;
  aggregate: <T = AggregateSignedUploadPromise>() => T;
}

export interface SignedUploadConnectionSubscription
  extends Promise<AsyncIterator<SignedUploadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SignedUploadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSignedUploadSubscription>() => T;
}

export interface SectionSubscriptionPayload {
  mutation: MutationType;
  node: Section;
  updatedFields: String[];
  previousValues: SectionPreviousValues;
}

export interface SectionSubscriptionPayloadPromise
  extends Promise<SectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SectionPreviousValuesPromise>() => T;
}

export interface SectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SectionPreviousValuesSubscription>() => T;
}

export interface SignedUpload {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  signedRequest?: String;
  url?: String;
}

export interface SignedUploadPromise
  extends Promise<SignedUpload>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  signedRequest: () => Promise<String>;
  url: () => Promise<String>;
}

export interface SignedUploadSubscription
  extends Promise<AsyncIterator<SignedUpload>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  signedRequest: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface SignedUploadNullablePromise
  extends Promise<SignedUpload | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  signedRequest: () => Promise<String>;
  url: () => Promise<String>;
}

export interface SectionPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  date: String;
}

export interface SectionPreviousValuesPromise
  extends Promise<SectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  date: () => Promise<String>;
}

export interface SectionPreviousValuesSubscription
  extends Promise<AsyncIterator<SectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  date: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SignedUploadSubscriptionPayload {
  mutation: MutationType;
  node: SignedUpload;
  updatedFields: String[];
  previousValues: SignedUploadPreviousValues;
}

export interface SignedUploadSubscriptionPayloadPromise
  extends Promise<SignedUploadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SignedUploadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SignedUploadPreviousValuesPromise>() => T;
}

export interface SignedUploadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SignedUploadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SignedUploadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SignedUploadPreviousValuesSubscription>() => T;
}

export interface TopicConnection {
  pageInfo: PageInfo;
  edges: TopicEdge[];
}

export interface TopicConnectionPromise
  extends Promise<TopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TopicEdge>>() => T;
  aggregate: <T = AggregateTopicPromise>() => T;
}

export interface TopicConnectionSubscription
  extends Promise<AsyncIterator<TopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTopicSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  type?: PostType;
  name: String;
  slug: String;
  link?: String;
  thumbnail: String;
  description: String;
  tagline?: String;
  votesCount: Int;
  commentsCount: Int;
  day?: String;
  featured?: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<PostType>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  link: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  tagline: () => Promise<String>;
  votesCount: () => Promise<Int>;
  commentsCount: () => Promise<Int>;
  day: () => Promise<String>;
  featured: () => Promise<Boolean>;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<PostType>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  tagline: () => Promise<AsyncIterator<String>>;
  votesCount: () => Promise<AsyncIterator<Int>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<String>>;
  featured: () => Promise<AsyncIterator<Boolean>>;
  topics: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<PostType>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  link: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  tagline: () => Promise<String>;
  votesCount: () => Promise<Int>;
  commentsCount: () => Promise<Int>;
  day: () => Promise<String>;
  featured: () => Promise<Boolean>;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TopicPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  name: String;
  slug: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
}

export interface TopicPreviousValuesPromise
  extends Promise<TopicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  followersCount: () => Promise<Int>;
  postsCount: () => Promise<Int>;
  trending: () => Promise<Boolean>;
}

export interface TopicPreviousValuesSubscription
  extends Promise<AsyncIterator<TopicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  followersCount: () => Promise<AsyncIterator<Int>>;
  postsCount: () => Promise<AsyncIterator<Int>>;
  trending: () => Promise<AsyncIterator<Boolean>>;
}

export interface TopicSubscriptionPayload {
  mutation: MutationType;
  node: Topic;
  updatedFields: String[];
  previousValues: TopicPreviousValues;
}

export interface TopicSubscriptionPayloadPromise
  extends Promise<TopicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TopicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TopicPreviousValuesPromise>() => T;
}

export interface TopicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TopicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TopicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TopicPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SignedUploadPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  signedRequest?: String;
  url?: String;
}

export interface SignedUploadPreviousValuesPromise
  extends Promise<SignedUploadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  signedRequest: () => Promise<String>;
  url: () => Promise<String>;
}

export interface SignedUploadPreviousValuesSubscription
  extends Promise<AsyncIterator<SignedUploadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  signedRequest: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSection {
  count: Int;
}

export interface AggregateSectionPromise
  extends Promise<AggregateSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSectionSubscription
  extends Promise<AsyncIterator<AggregateSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SignedUploadEdge {
  node: SignedUpload;
  cursor: String;
}

export interface SignedUploadEdgePromise
  extends Promise<SignedUploadEdge>,
    Fragmentable {
  node: <T = SignedUploadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SignedUploadEdgeSubscription
  extends Promise<AsyncIterator<SignedUploadEdge>>,
    Fragmentable {
  node: <T = SignedUploadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTopic {
  count: Int;
}

export interface AggregateTopicPromise
  extends Promise<AggregateTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTopicSubscription
  extends Promise<AsyncIterator<AggregateTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "PostType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Topic",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "Section",
    embedded: false
  },
  {
    name: "SignedUpload",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
