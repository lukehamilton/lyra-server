// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  post: (where?: PostWhereInput) => Promise<boolean>;
  section: (where?: SectionWhereInput) => Promise<boolean>;
  topic: (where?: TopicWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  section: (where: SectionWhereUniqueInput) => SectionPromise;
  sections: (
    args?: {
      where?: SectionWhereInput;
      orderBy?: SectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Section>;
  sectionsConnection: (
    args?: {
      where?: SectionWhereInput;
      orderBy?: SectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SectionConnectionPromise;
  topic: (where: TopicWhereUniqueInput) => TopicPromise;
  topics: (
    args?: {
      where?: TopicWhereInput;
      orderBy?: TopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Topic>;
  topicsConnection: (
    args?: {
      where?: TopicWhereInput;
      orderBy?: TopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TopicConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VotePromise;
  votes: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Vote>;
  votesConnection: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createSection: (data: SectionCreateInput) => SectionPromise;
  updateSection: (
    args: { data: SectionUpdateInput; where: SectionWhereUniqueInput }
  ) => SectionPromise;
  updateManySections: (
    args: { data: SectionUpdateManyMutationInput; where?: SectionWhereInput }
  ) => BatchPayloadPromise;
  upsertSection: (
    args: {
      where: SectionWhereUniqueInput;
      create: SectionCreateInput;
      update: SectionUpdateInput;
    }
  ) => SectionPromise;
  deleteSection: (where: SectionWhereUniqueInput) => SectionPromise;
  deleteManySections: (where?: SectionWhereInput) => BatchPayloadPromise;
  createTopic: (data: TopicCreateInput) => TopicPromise;
  updateTopic: (
    args: { data: TopicUpdateInput; where: TopicWhereUniqueInput }
  ) => TopicPromise;
  updateManyTopics: (
    args: { data: TopicUpdateManyMutationInput; where?: TopicWhereInput }
  ) => BatchPayloadPromise;
  upsertTopic: (
    args: {
      where: TopicWhereUniqueInput;
      create: TopicCreateInput;
      update: TopicUpdateInput;
    }
  ) => TopicPromise;
  deleteTopic: (where: TopicWhereUniqueInput) => TopicPromise;
  deleteManyTopics: (where?: TopicWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (
    args: { data: VoteUpdateInput; where: VoteWhereUniqueInput }
  ) => VotePromise;
  upsertVote: (
    args: {
      where: VoteWhereUniqueInput;
      create: VoteCreateInput;
      update: VoteUpdateInput;
    }
  ) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  section: (
    where?: SectionSubscriptionWhereInput
  ) => SectionSubscriptionPayloadSubscription;
  topic: (
    where?: TopicSubscriptionWhereInput
  ) => TopicSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "USER";

export type TopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "followersCount_ASC"
  | "followersCount_DESC"
  | "postsCount_ASC"
  | "postsCount_DESC"
  | "trending_ASC"
  | "trending_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "description_ASC"
  | "description_DESC"
  | "votesCount_ASC"
  | "votesCount_DESC"
  | "commentsCount_ASC"
  | "commentsCount_DESC"
  | "day_ASC"
  | "day_DESC"
  | "featured_ASC"
  | "featured_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "auth0id_ASC"
  | "auth0id_DESC"
  | "identity_ASC"
  | "identity_DESC"
  | "privateKey_ASC"
  | "privateKey_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostType = "PRODUCT" | "LINK";

export type SectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  post?: PostWhereInput;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface VoteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  OR?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  NOT?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: PostType;
  type_not?: PostType;
  type_in?: PostType[] | PostType;
  type_not_in?: PostType[] | PostType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  thumbnail?: String;
  thumbnail_not?: String;
  thumbnail_in?: String[] | String;
  thumbnail_not_in?: String[] | String;
  thumbnail_lt?: String;
  thumbnail_lte?: String;
  thumbnail_gt?: String;
  thumbnail_gte?: String;
  thumbnail_contains?: String;
  thumbnail_not_contains?: String;
  thumbnail_starts_with?: String;
  thumbnail_not_starts_with?: String;
  thumbnail_ends_with?: String;
  thumbnail_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  votesCount?: Int;
  votesCount_not?: Int;
  votesCount_in?: Int[] | Int;
  votesCount_not_in?: Int[] | Int;
  votesCount_lt?: Int;
  votesCount_lte?: Int;
  votesCount_gt?: Int;
  votesCount_gte?: Int;
  commentsCount?: Int;
  commentsCount_not?: Int;
  commentsCount_in?: Int[] | Int;
  commentsCount_not_in?: Int[] | Int;
  commentsCount_lt?: Int;
  commentsCount_lte?: Int;
  commentsCount_gt?: Int;
  commentsCount_gte?: Int;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  featured?: Boolean;
  featured_not?: Boolean;
  topics_every?: TopicWhereInput;
  topics_some?: TopicWhereInput;
  topics_none?: TopicWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PostCreateWithoutTopicsInput {
  type?: PostType;
  name: String;
  slug: String;
  thumbnail: String;
  description: String;
  votesCount: Int;
  commentsCount: Int;
  day?: String;
  featured?: Boolean;
  votes?: VoteCreateManyWithoutPostInput;
}

export interface TopicUpdateManyDataInput {
  name?: String;
  slug?: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
}

export interface VoteCreateManyWithoutPostInput {
  create?: VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowedTopicsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowedTopicsDataInput;
  create: UserCreateWithoutFollowedTopicsInput;
}

export interface VoteCreateWithoutPostInput {
  user: UserCreateOneWithoutVotesInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PostUpdateInput {
  type?: PostType;
  name?: String;
  slug?: String;
  thumbnail?: String;
  description?: String;
  votesCount?: Int;
  commentsCount?: Int;
  day?: String;
  featured?: Boolean;
  topics?: TopicUpdateManyWithoutPostsInput;
  votes?: VoteUpdateManyWithoutPostInput;
}

export interface SectionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SectionWhereInput;
  AND?: SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput;
  OR?: SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput;
  NOT?: SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput;
}

export interface TopicUpdateManyWithoutPostsInput {
  create?: TopicCreateWithoutPostsInput[] | TopicCreateWithoutPostsInput;
  delete?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  connect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  set?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  disconnect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  update?:
    | TopicUpdateWithWhereUniqueWithoutPostsInput[]
    | TopicUpdateWithWhereUniqueWithoutPostsInput;
  upsert?:
    | TopicUpsertWithWhereUniqueWithoutPostsInput[]
    | TopicUpsertWithWhereUniqueWithoutPostsInput;
  deleteMany?: TopicScalarWhereInput[] | TopicScalarWhereInput;
  updateMany?:
    | TopicUpdateManyWithWhereNestedInput[]
    | TopicUpdateManyWithWhereNestedInput;
}

export interface VoteUpdateInput {
  user?: UserUpdateOneRequiredWithoutVotesInput;
  post?: PostUpdateOneRequiredWithoutVotesInput;
}

export interface TopicUpdateWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutPostsDataInput;
}

export interface UserUpdateInput {
  email?: String;
  role?: Role;
  name?: String;
  avatar?: String;
  auth0id?: String;
  identity?: String;
  privateKey?: String;
  followedTopics?: TopicUpdateManyWithoutFollowedByInput;
  votes?: VoteUpdateManyWithoutUserInput;
}

export interface TopicUpdateWithoutPostsDataInput {
  name?: String;
  slug?: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
  followedBy?: UserUpdateManyWithoutFollowedTopicsInput;
  votes?: VoteUpdateManyInput;
}

export interface UserCreateInput {
  email?: String;
  role?: Role;
  name: String;
  avatar?: String;
  auth0id: String;
  identity?: String;
  privateKey?: String;
  followedTopics?: TopicCreateManyWithoutFollowedByInput;
  votes?: VoteCreateManyWithoutUserInput;
}

export interface UserUpdateManyWithoutFollowedTopicsInput {
  create?:
    | UserCreateWithoutFollowedTopicsInput[]
    | UserCreateWithoutFollowedTopicsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFollowedTopicsInput[]
    | UserUpdateWithWhereUniqueWithoutFollowedTopicsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFollowedTopicsInput[]
    | UserUpsertWithWhereUniqueWithoutFollowedTopicsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface TopicUpdateManyMutationInput {
  name?: String;
  slug?: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
}

export interface UserUpdateWithWhereUniqueWithoutFollowedTopicsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowedTopicsDataInput;
}

export interface TopicCreateInput {
  name: String;
  slug: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
  posts?: PostCreateManyWithoutTopicsInput;
  followedBy?: UserCreateManyWithoutFollowedTopicsInput;
  votes?: VoteCreateManyInput;
}

export interface UserUpdateWithoutFollowedTopicsDataInput {
  email?: String;
  role?: Role;
  name?: String;
  avatar?: String;
  auth0id?: String;
  identity?: String;
  privateKey?: String;
  votes?: VoteUpdateManyWithoutUserInput;
}

export type TopicWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface VoteUpdateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface PostUpdateDataInput {
  type?: PostType;
  name?: String;
  slug?: String;
  thumbnail?: String;
  description?: String;
  votesCount?: Int;
  commentsCount?: Int;
  day?: String;
  featured?: Boolean;
  topics?: TopicUpdateManyWithoutPostsInput;
  votes?: VoteUpdateManyWithoutPostInput;
}

export interface VoteUpsertWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateDataInput;
  create: VoteCreateInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  auth0id?: String;
}>;

export interface VoteUpdateWithoutUserDataInput {
  post?: PostUpdateOneRequiredWithoutVotesInput;
}

export interface SectionUpdateInput {
  date?: String;
  posts?: PostUpdateManyInput;
}

export interface PostUpdateOneRequiredWithoutVotesInput {
  create?: PostCreateWithoutVotesInput;
  update?: PostUpdateWithoutVotesDataInput;
  upsert?: PostUpsertWithoutVotesInput;
  connect?: PostWhereUniqueInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpdateWithoutVotesDataInput {
  type?: PostType;
  name?: String;
  slug?: String;
  thumbnail?: String;
  description?: String;
  votesCount?: Int;
  commentsCount?: Int;
  day?: String;
  featured?: Boolean;
  topics?: TopicUpdateManyWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  type?: PostType;
  name?: String;
  slug?: String;
  thumbnail?: String;
  description?: String;
  votesCount?: Int;
  commentsCount?: Int;
  day?: String;
  featured?: Boolean;
}

export interface PostUpsertWithoutVotesInput {
  update: PostUpdateWithoutVotesDataInput;
  create: PostCreateWithoutVotesInput;
}

export interface TopicCreateManyWithoutPostsInput {
  create?: TopicCreateWithoutPostsInput[] | TopicCreateWithoutPostsInput;
  connect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  auth0id?: String;
  auth0id_not?: String;
  auth0id_in?: String[] | String;
  auth0id_not_in?: String[] | String;
  auth0id_lt?: String;
  auth0id_lte?: String;
  auth0id_gt?: String;
  auth0id_gte?: String;
  auth0id_contains?: String;
  auth0id_not_contains?: String;
  auth0id_starts_with?: String;
  auth0id_not_starts_with?: String;
  auth0id_ends_with?: String;
  auth0id_not_ends_with?: String;
  identity?: String;
  identity_not?: String;
  identity_in?: String[] | String;
  identity_not_in?: String[] | String;
  identity_lt?: String;
  identity_lte?: String;
  identity_gt?: String;
  identity_gte?: String;
  identity_contains?: String;
  identity_not_contains?: String;
  identity_starts_with?: String;
  identity_not_starts_with?: String;
  identity_ends_with?: String;
  identity_not_ends_with?: String;
  privateKey?: String;
  privateKey_not?: String;
  privateKey_in?: String[] | String;
  privateKey_not_in?: String[] | String;
  privateKey_lt?: String;
  privateKey_lte?: String;
  privateKey_gt?: String;
  privateKey_gte?: String;
  privateKey_contains?: String;
  privateKey_not_contains?: String;
  privateKey_starts_with?: String;
  privateKey_not_starts_with?: String;
  privateKey_ends_with?: String;
  privateKey_not_ends_with?: String;
  followedTopics_every?: TopicWhereInput;
  followedTopics_some?: TopicWhereInput;
  followedTopics_none?: TopicWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateManyWithoutFollowedTopicsInput {
  create?:
    | UserCreateWithoutFollowedTopicsInput[]
    | UserCreateWithoutFollowedTopicsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface VoteCreateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface TopicWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  followersCount?: Int;
  followersCount_not?: Int;
  followersCount_in?: Int[] | Int;
  followersCount_not_in?: Int[] | Int;
  followersCount_lt?: Int;
  followersCount_lte?: Int;
  followersCount_gt?: Int;
  followersCount_gte?: Int;
  postsCount?: Int;
  postsCount_not?: Int;
  postsCount_in?: Int[] | Int;
  postsCount_not_in?: Int[] | Int;
  postsCount_lt?: Int;
  postsCount_lte?: Int;
  postsCount_gt?: Int;
  postsCount_gte?: Int;
  trending?: Boolean;
  trending_not?: Boolean;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  followedBy_every?: UserWhereInput;
  followedBy_some?: UserWhereInput;
  followedBy_none?: UserWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: TopicWhereInput[] | TopicWhereInput;
  OR?: TopicWhereInput[] | TopicWhereInput;
  NOT?: TopicWhereInput[] | TopicWhereInput;
}

export interface PostCreateOneWithoutVotesInput {
  create?: PostCreateWithoutVotesInput;
  connect?: PostWhereUniqueInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  auth0id?: String;
  auth0id_not?: String;
  auth0id_in?: String[] | String;
  auth0id_not_in?: String[] | String;
  auth0id_lt?: String;
  auth0id_lte?: String;
  auth0id_gt?: String;
  auth0id_gte?: String;
  auth0id_contains?: String;
  auth0id_not_contains?: String;
  auth0id_starts_with?: String;
  auth0id_not_starts_with?: String;
  auth0id_ends_with?: String;
  auth0id_not_ends_with?: String;
  identity?: String;
  identity_not?: String;
  identity_in?: String[] | String;
  identity_not_in?: String[] | String;
  identity_lt?: String;
  identity_lte?: String;
  identity_gt?: String;
  identity_gte?: String;
  identity_contains?: String;
  identity_not_contains?: String;
  identity_starts_with?: String;
  identity_not_starts_with?: String;
  identity_ends_with?: String;
  identity_not_ends_with?: String;
  privateKey?: String;
  privateKey_not?: String;
  privateKey_in?: String[] | String;
  privateKey_not_in?: String[] | String;
  privateKey_lt?: String;
  privateKey_lte?: String;
  privateKey_gt?: String;
  privateKey_gte?: String;
  privateKey_contains?: String;
  privateKey_not_contains?: String;
  privateKey_starts_with?: String;
  privateKey_not_starts_with?: String;
  privateKey_ends_with?: String;
  privateKey_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface VoteCreateManyInput {
  create?: VoteCreateInput[] | VoteCreateInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateOneWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
  role?: Role;
  name?: String;
  avatar?: String;
  auth0id?: String;
  identity?: String;
  privateKey?: String;
}

export interface TopicCreateManyWithoutFollowedByInput {
  create?:
    | TopicCreateWithoutFollowedByInput[]
    | TopicCreateWithoutFollowedByInput;
  connect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
}

export interface VoteUpdateManyInput {
  create?: VoteCreateInput[] | VoteCreateInput;
  update?:
    | VoteUpdateWithWhereUniqueNestedInput[]
    | VoteUpdateWithWhereUniqueNestedInput;
  upsert?:
    | VoteUpsertWithWhereUniqueNestedInput[]
    | VoteUpsertWithWhereUniqueNestedInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface PostCreateManyWithoutTopicsInput {
  create?: PostCreateWithoutTopicsInput[] | PostCreateWithoutTopicsInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface VoteUpdateWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateDataInput;
}

export interface TopicSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TopicWhereInput;
  AND?: TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput;
  OR?: TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput;
  NOT?: TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput;
}

export interface VoteUpdateDataInput {
  user?: UserUpdateOneRequiredWithoutVotesInput;
  post?: PostUpdateOneRequiredWithoutVotesInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  role?: Role;
  name?: String;
  avatar?: String;
  auth0id?: String;
  identity?: String;
  privateKey?: String;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  update?: UserUpdateWithoutVotesDataInput;
  upsert?: UserUpsertWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export interface SectionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  date?: String;
  date_not?: String;
  date_in?: String[] | String;
  date_not_in?: String[] | String;
  date_lt?: String;
  date_lte?: String;
  date_gt?: String;
  date_gte?: String;
  date_contains?: String;
  date_not_contains?: String;
  date_starts_with?: String;
  date_not_starts_with?: String;
  date_ends_with?: String;
  date_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: SectionWhereInput[] | SectionWhereInput;
  OR?: SectionWhereInput[] | SectionWhereInput;
  NOT?: SectionWhereInput[] | SectionWhereInput;
}

export interface UserUpdateWithoutVotesDataInput {
  email?: String;
  role?: Role;
  name?: String;
  avatar?: String;
  auth0id?: String;
  identity?: String;
  privateKey?: String;
  followedTopics?: TopicUpdateManyWithoutFollowedByInput;
}

export interface SectionUpdateManyMutationInput {
  date?: String;
}

export interface TopicUpdateManyWithoutFollowedByInput {
  create?:
    | TopicCreateWithoutFollowedByInput[]
    | TopicCreateWithoutFollowedByInput;
  delete?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  connect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  set?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  disconnect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  update?:
    | TopicUpdateWithWhereUniqueWithoutFollowedByInput[]
    | TopicUpdateWithWhereUniqueWithoutFollowedByInput;
  upsert?:
    | TopicUpsertWithWhereUniqueWithoutFollowedByInput[]
    | TopicUpsertWithWhereUniqueWithoutFollowedByInput;
  deleteMany?: TopicScalarWhereInput[] | TopicScalarWhereInput;
  updateMany?:
    | TopicUpdateManyWithWhereNestedInput[]
    | TopicUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput;
  data: PostUpdateDataInput;
}

export interface TopicUpdateWithWhereUniqueWithoutFollowedByInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutFollowedByDataInput;
}

export interface PostCreateManyInput {
  create?: PostCreateInput[] | PostCreateInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface TopicUpdateWithoutFollowedByDataInput {
  name?: String;
  slug?: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
  posts?: PostUpdateManyWithoutTopicsInput;
  votes?: VoteUpdateManyInput;
}

export interface TopicUpsertWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutPostsDataInput;
  create: TopicCreateWithoutPostsInput;
}

export interface PostUpdateManyWithoutTopicsInput {
  create?: PostCreateWithoutTopicsInput[] | PostCreateWithoutTopicsInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutTopicsInput[]
    | PostUpdateWithWhereUniqueWithoutTopicsInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutTopicsInput[]
    | PostUpsertWithWhereUniqueWithoutTopicsInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface TopicCreateWithoutPostsInput {
  name: String;
  slug: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
  followedBy?: UserCreateManyWithoutFollowedTopicsInput;
  votes?: VoteCreateManyInput;
}

export interface PostUpdateWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutTopicsDataInput;
}

export interface VoteCreateWithoutUserInput {
  post: PostCreateOneWithoutVotesInput;
}

export interface PostUpdateWithoutTopicsDataInput {
  type?: PostType;
  name?: String;
  slug?: String;
  thumbnail?: String;
  description?: String;
  votesCount?: Int;
  commentsCount?: Int;
  day?: String;
  featured?: Boolean;
  votes?: VoteUpdateManyWithoutPostInput;
}

export interface VoteCreateInput {
  user: UserCreateOneWithoutVotesInput;
  post: PostCreateOneWithoutVotesInput;
}

export interface VoteUpdateManyWithoutPostInput {
  create?: VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutPostInput[]
    | VoteUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutPostInput[]
    | VoteUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface TopicCreateWithoutFollowedByInput {
  name: String;
  slug: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
  posts?: PostCreateManyWithoutTopicsInput;
  votes?: VoteCreateManyInput;
}

export interface VoteUpdateWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutPostDataInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface VoteUpdateWithoutPostDataInput {
  user?: UserUpdateOneRequiredWithoutVotesInput;
}

export interface TopicUpdateInput {
  name?: String;
  slug?: String;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
  posts?: PostUpdateManyWithoutTopicsInput;
  followedBy?: UserUpdateManyWithoutFollowedTopicsInput;
  votes?: VoteUpdateManyInput;
}

export interface VoteUpsertWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutPostDataInput;
  create: VoteCreateWithoutPostInput;
}

export interface PostUpdateManyInput {
  create?: PostCreateInput[] | PostCreateInput;
  update?:
    | PostUpdateWithWhereUniqueNestedInput[]
    | PostUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PostUpsertWithWhereUniqueNestedInput[]
    | PostUpsertWithWhereUniqueNestedInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpsertWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutTopicsDataInput;
  create: PostCreateWithoutTopicsInput;
}

export interface PostCreateInput {
  type?: PostType;
  name: String;
  slug: String;
  thumbnail: String;
  description: String;
  votesCount: Int;
  commentsCount: Int;
  day?: String;
  featured?: Boolean;
  topics?: TopicCreateManyWithoutPostsInput;
  votes?: VoteCreateManyWithoutPostInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: PostType;
  type_not?: PostType;
  type_in?: PostType[] | PostType;
  type_not_in?: PostType[] | PostType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  thumbnail?: String;
  thumbnail_not?: String;
  thumbnail_in?: String[] | String;
  thumbnail_not_in?: String[] | String;
  thumbnail_lt?: String;
  thumbnail_lte?: String;
  thumbnail_gt?: String;
  thumbnail_gte?: String;
  thumbnail_contains?: String;
  thumbnail_not_contains?: String;
  thumbnail_starts_with?: String;
  thumbnail_not_starts_with?: String;
  thumbnail_ends_with?: String;
  thumbnail_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  votesCount?: Int;
  votesCount_not?: Int;
  votesCount_in?: Int[] | Int;
  votesCount_not_in?: Int[] | Int;
  votesCount_lt?: Int;
  votesCount_lte?: Int;
  votesCount_gt?: Int;
  votesCount_gte?: Int;
  commentsCount?: Int;
  commentsCount_not?: Int;
  commentsCount_in?: Int[] | Int;
  commentsCount_not_in?: Int[] | Int;
  commentsCount_lt?: Int;
  commentsCount_lte?: Int;
  commentsCount_gt?: Int;
  commentsCount_gte?: Int;
  day?: String;
  day_not?: String;
  day_in?: String[] | String;
  day_not_in?: String[] | String;
  day_lt?: String;
  day_lte?: String;
  day_gt?: String;
  day_gte?: String;
  day_contains?: String;
  day_not_contains?: String;
  day_starts_with?: String;
  day_not_starts_with?: String;
  day_ends_with?: String;
  day_not_ends_with?: String;
  featured?: Boolean;
  featured_not?: Boolean;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostCreateWithoutVotesInput {
  type?: PostType;
  name: String;
  slug: String;
  thumbnail: String;
  description: String;
  votesCount: Int;
  commentsCount: Int;
  day?: String;
  featured?: Boolean;
  topics?: TopicCreateManyWithoutPostsInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput;
  data: TopicUpdateManyDataInput;
}

export interface TopicScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  followersCount?: Int;
  followersCount_not?: Int;
  followersCount_in?: Int[] | Int;
  followersCount_not_in?: Int[] | Int;
  followersCount_lt?: Int;
  followersCount_lte?: Int;
  followersCount_gt?: Int;
  followersCount_gte?: Int;
  postsCount?: Int;
  postsCount_not?: Int;
  postsCount_in?: Int[] | Int;
  postsCount_not_in?: Int[] | Int;
  postsCount_lt?: Int;
  postsCount_lte?: Int;
  postsCount_gt?: Int;
  postsCount_gte?: Int;
  trending?: Boolean;
  trending_not?: Boolean;
  AND?: TopicScalarWhereInput[] | TopicScalarWhereInput;
  OR?: TopicScalarWhereInput[] | TopicScalarWhereInput;
  NOT?: TopicScalarWhereInput[] | TopicScalarWhereInput;
}

export interface TopicUpsertWithWhereUniqueWithoutFollowedByInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutFollowedByDataInput;
  create: TopicCreateWithoutFollowedByInput;
}

export interface PostUpdateManyDataInput {
  type?: PostType;
  name?: String;
  slug?: String;
  thumbnail?: String;
  description?: String;
  votesCount?: Int;
  commentsCount?: Int;
  day?: String;
  featured?: Boolean;
}

export type SectionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  date?: String;
}>;

export interface UserCreateWithoutVotesInput {
  email?: String;
  role?: Role;
  name: String;
  avatar?: String;
  auth0id: String;
  identity?: String;
  privateKey?: String;
  followedTopics?: TopicCreateManyWithoutFollowedByInput;
}

export interface UserCreateWithoutFollowedTopicsInput {
  email?: String;
  role?: Role;
  name: String;
  avatar?: String;
  auth0id: String;
  identity?: String;
  privateKey?: String;
  votes?: VoteCreateManyWithoutUserInput;
}

export interface SectionCreateInput {
  date: String;
  posts?: PostCreateManyInput;
}

export interface PostUpsertWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput;
  update: PostUpdateDataInput;
  create: PostCreateInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValues {
  id: ID_Output;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Topic {
  id: ID_Output;
  name: String;
  slug: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
}

export interface TopicPromise extends Promise<Topic>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  followersCount: () => Promise<Int>;
  postsCount: () => Promise<Int>;
  trending: () => Promise<Boolean>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followedBy: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = FragmentableArray<Vote>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TopicSubscription
  extends Promise<AsyncIterator<Topic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  followersCount: () => Promise<AsyncIterator<Int>>;
  postsCount: () => Promise<AsyncIterator<Int>>;
  trending: () => Promise<AsyncIterator<Boolean>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followedBy: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  role?: Role;
  name: String;
  avatar?: String;
  auth0id: String;
  identity?: String;
  privateKey?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  auth0id: () => Promise<String>;
  identity: () => Promise<String>;
  privateKey: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  auth0id: () => Promise<AsyncIterator<String>>;
  identity: () => Promise<AsyncIterator<String>>;
  privateKey: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email?: String;
  role?: Role;
  name: String;
  avatar?: String;
  auth0id: String;
  identity?: String;
  privateKey?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  auth0id: () => Promise<String>;
  identity: () => Promise<String>;
  privateKey: () => Promise<String>;
  followedTopics: <T = FragmentableArray<Topic>>(
    args?: {
      where?: TopicWhereInput;
      orderBy?: TopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = FragmentableArray<Vote>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  auth0id: () => Promise<AsyncIterator<String>>;
  identity: () => Promise<AsyncIterator<String>>;
  privateKey: () => Promise<AsyncIterator<String>>;
  followedTopics: <T = Promise<AsyncIterator<TopicSubscription>>>(
    args?: {
      where?: TopicWhereInput;
      orderBy?: TopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface TopicEdge {
  node: Topic;
  cursor: String;
}

export interface TopicEdgePromise extends Promise<TopicEdge>, Fragmentable {
  node: <T = TopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TopicEdgeSubscription
  extends Promise<AsyncIterator<TopicEdge>>,
    Fragmentable {
  node: <T = TopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregateSection {
  count: Int;
}

export interface AggregateSectionPromise
  extends Promise<AggregateSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSectionSubscription
  extends Promise<AsyncIterator<AggregateSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  type?: PostType;
  name: String;
  slug: String;
  thumbnail: String;
  description: String;
  votesCount: Int;
  commentsCount: Int;
  day?: String;
  featured?: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PostType>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  votesCount: () => Promise<Int>;
  commentsCount: () => Promise<Int>;
  day: () => Promise<String>;
  featured: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<PostType>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  votesCount: () => Promise<AsyncIterator<Int>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<String>>;
  featured: () => Promise<AsyncIterator<Boolean>>;
}

export interface SectionConnection {
  pageInfo: PageInfo;
  edges: SectionEdge[];
}

export interface SectionConnectionPromise
  extends Promise<SectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SectionEdge>>() => T;
  aggregate: <T = AggregateSectionPromise>() => T;
}

export interface SectionConnectionSubscription
  extends Promise<AsyncIterator<SectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSectionSubscription>() => T;
}

export interface Vote {
  id: ID_Output;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
}

export interface Section {
  id: ID_Output;
  date: String;
}

export interface SectionPromise extends Promise<Section>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SectionSubscription
  extends Promise<AsyncIterator<Section>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SectionSubscriptionPayload {
  mutation: MutationType;
  node: Section;
  updatedFields: String[];
  previousValues: SectionPreviousValues;
}

export interface SectionSubscriptionPayloadPromise
  extends Promise<SectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SectionPreviousValuesPromise>() => T;
}

export interface SectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SectionPreviousValuesSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TopicConnection {
  pageInfo: PageInfo;
  edges: TopicEdge[];
}

export interface TopicConnectionPromise
  extends Promise<TopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TopicEdge>>() => T;
  aggregate: <T = AggregateTopicPromise>() => T;
}

export interface TopicConnectionSubscription
  extends Promise<AsyncIterator<TopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTopicSubscription>() => T;
}

export interface TopicPreviousValues {
  id: ID_Output;
  name: String;
  slug: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description?: String;
  image?: String;
  followersCount?: Int;
  postsCount?: Int;
  trending?: Boolean;
}

export interface TopicPreviousValuesPromise
  extends Promise<TopicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  followersCount: () => Promise<Int>;
  postsCount: () => Promise<Int>;
  trending: () => Promise<Boolean>;
}

export interface TopicPreviousValuesSubscription
  extends Promise<AsyncIterator<TopicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  followersCount: () => Promise<AsyncIterator<Int>>;
  postsCount: () => Promise<AsyncIterator<Int>>;
  trending: () => Promise<AsyncIterator<Boolean>>;
}

export interface TopicSubscriptionPayload {
  mutation: MutationType;
  node: Topic;
  updatedFields: String[];
  previousValues: TopicPreviousValues;
}

export interface TopicSubscriptionPayloadPromise
  extends Promise<TopicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TopicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TopicPreviousValuesPromise>() => T;
}

export interface TopicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TopicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TopicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TopicPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SectionPreviousValues {
  id: ID_Output;
  date: String;
}

export interface SectionPreviousValuesPromise
  extends Promise<SectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
}

export interface SectionPreviousValuesSubscription
  extends Promise<AsyncIterator<SectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
}

export interface SectionEdge {
  node: Section;
  cursor: String;
}

export interface SectionEdgePromise extends Promise<SectionEdge>, Fragmentable {
  node: <T = SectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SectionEdgeSubscription
  extends Promise<AsyncIterator<SectionEdge>>,
    Fragmentable {
  node: <T = SectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTopic {
  count: Int;
}

export interface AggregateTopicPromise
  extends Promise<AggregateTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTopicSubscription
  extends Promise<AsyncIterator<AggregateTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  type?: PostType;
  name: String;
  slug: String;
  thumbnail: String;
  description: String;
  votesCount: Int;
  commentsCount: Int;
  day?: String;
  featured?: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PostType>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  votesCount: () => Promise<Int>;
  commentsCount: () => Promise<Int>;
  day: () => Promise<String>;
  featured: () => Promise<Boolean>;
  topics: <T = FragmentableArray<Topic>>(
    args?: {
      where?: TopicWhereInput;
      orderBy?: TopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = FragmentableArray<Vote>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<PostType>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  votesCount: () => Promise<AsyncIterator<Int>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<String>>;
  featured: () => Promise<AsyncIterator<Boolean>>;
  topics: <T = Promise<AsyncIterator<TopicSubscription>>>(
    args?: {
      where?: TopicWhereInput;
      orderBy?: TopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Topic",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "Section",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "PostType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
