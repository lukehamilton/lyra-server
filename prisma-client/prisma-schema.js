module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePost {
  count: Int!
}

type AggregateSection {
  count: Int!
}

type AggregateSignedUpload {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createSection(data: SectionCreateInput!): Section!
  updateSection(data: SectionUpdateInput!, where: SectionWhereUniqueInput!): Section
  updateManySections(data: SectionUpdateManyMutationInput!, where: SectionWhereInput): BatchPayload!
  upsertSection(where: SectionWhereUniqueInput!, create: SectionCreateInput!, update: SectionUpdateInput!): Section!
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteManySections(where: SectionWhereInput): BatchPayload!
  createSignedUpload(data: SignedUploadCreateInput!): SignedUpload!
  updateSignedUpload(data: SignedUploadUpdateInput!, where: SignedUploadWhereUniqueInput!): SignedUpload
  updateManySignedUploads(data: SignedUploadUpdateManyMutationInput!, where: SignedUploadWhereInput): BatchPayload!
  upsertSignedUpload(where: SignedUploadWhereUniqueInput!, create: SignedUploadCreateInput!, update: SignedUploadUpdateInput!): SignedUpload!
  deleteSignedUpload(where: SignedUploadWhereUniqueInput!): SignedUpload
  deleteManySignedUploads(where: SignedUploadWhereInput): BatchPayload!
  createTopic(data: TopicCreateInput!): Topic!
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  type: PostType
  name: String!
  slug: String!
  link: String
  thumbnail: String!
  description: String!
  galleryThumbs: [String!]!
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreategalleryThumbsInput {
  set: [String!]
}

input PostCreateInput {
  id: ID
  type: PostType
  name: String!
  slug: String!
  link: String
  thumbnail: String!
  description: String!
  galleryThumbs: PostCreategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  topics: TopicCreateManyWithoutPostsInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutTopicsInput {
  create: [PostCreateWithoutTopicsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutVotesInput {
  create: PostCreateWithoutVotesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutTopicsInput {
  id: ID
  type: PostType
  name: String!
  slug: String!
  link: String
  thumbnail: String!
  description: String!
  galleryThumbs: PostCreategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateWithoutVotesInput {
  id: ID
  type: PostType
  name: String!
  slug: String!
  link: String
  thumbnail: String!
  description: String!
  galleryThumbs: PostCreategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  topics: TopicCreateManyWithoutPostsInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  link_ASC
  link_DESC
  thumbnail_ASC
  thumbnail_DESC
  description_ASC
  description_DESC
  tagline_ASC
  tagline_DESC
  votesCount_ASC
  votesCount_DESC
  commentsCount_ASC
  commentsCount_DESC
  day_ASC
  day_DESC
  featured_ASC
  featured_DESC
}

type PostPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  type: PostType
  name: String!
  slug: String!
  link: String
  thumbnail: String!
  description: String!
  galleryThumbs: [String!]!
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: PostType
  type_not: PostType
  type_in: [PostType!]
  type_not_in: [PostType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  tagline: String
  tagline_not: String
  tagline_in: [String!]
  tagline_not_in: [String!]
  tagline_lt: String
  tagline_lte: String
  tagline_gt: String
  tagline_gte: String
  tagline_contains: String
  tagline_not_contains: String
  tagline_starts_with: String
  tagline_not_starts_with: String
  tagline_ends_with: String
  tagline_not_ends_with: String
  votesCount: Int
  votesCount_not: Int
  votesCount_in: [Int!]
  votesCount_not_in: [Int!]
  votesCount_lt: Int
  votesCount_lte: Int
  votesCount_gt: Int
  votesCount_gte: Int
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  day: String
  day_not: String
  day_in: [String!]
  day_not_in: [String!]
  day_lt: String
  day_lte: String
  day_gt: String
  day_gte: String
  day_contains: String
  day_not_contains: String
  day_starts_with: String
  day_not_starts_with: String
  day_ends_with: String
  day_not_ends_with: String
  featured: Boolean
  featured_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

enum PostType {
  PRODUCT
  LINK
}

input PostUpdateDataInput {
  type: PostType
  name: String
  slug: String
  link: String
  thumbnail: String
  description: String
  galleryThumbs: PostUpdategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  topics: TopicUpdateManyWithoutPostsInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdategalleryThumbsInput {
  set: [String!]
}

input PostUpdateInput {
  type: PostType
  name: String
  slug: String
  link: String
  thumbnail: String
  description: String
  galleryThumbs: PostUpdategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  topics: TopicUpdateManyWithoutPostsInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  type: PostType
  name: String
  slug: String
  link: String
  thumbnail: String
  description: String
  galleryThumbs: PostUpdategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
}

input PostUpdateManyInput {
  create: [PostCreateInput!]
  update: [PostUpdateWithWhereUniqueNestedInput!]
  upsert: [PostUpsertWithWhereUniqueNestedInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyMutationInput {
  type: PostType
  name: String
  slug: String
  link: String
  thumbnail: String
  description: String
  galleryThumbs: PostUpdategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
}

input PostUpdateManyWithoutTopicsInput {
  create: [PostCreateWithoutTopicsInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTopicsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTopicsInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutVotesInput {
  create: PostCreateWithoutVotesInput
  update: PostUpdateWithoutVotesDataInput
  upsert: PostUpsertWithoutVotesInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutTopicsDataInput {
  type: PostType
  name: String
  slug: String
  link: String
  thumbnail: String
  description: String
  galleryThumbs: PostUpdategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutVotesDataInput {
  type: PostType
  name: String
  slug: String
  link: String
  thumbnail: String
  description: String
  galleryThumbs: PostUpdategalleryThumbsInput
  tagline: String
  votesCount: Int
  commentsCount: Int
  day: String
  featured: Boolean
  topics: TopicUpdateManyWithoutPostsInput
}

input PostUpdateWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  data: PostUpdateDataInput!
}

input PostUpdateWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutTopicsDataInput!
}

input PostUpsertWithoutVotesInput {
  update: PostUpdateWithoutVotesDataInput!
  create: PostCreateWithoutVotesInput!
}

input PostUpsertWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  update: PostUpdateDataInput!
  create: PostCreateInput!
}

input PostUpsertWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutTopicsDataInput!
  create: PostCreateWithoutTopicsInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: PostType
  type_not: PostType
  type_in: [PostType!]
  type_not_in: [PostType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  tagline: String
  tagline_not: String
  tagline_in: [String!]
  tagline_not_in: [String!]
  tagline_lt: String
  tagline_lte: String
  tagline_gt: String
  tagline_gte: String
  tagline_contains: String
  tagline_not_contains: String
  tagline_starts_with: String
  tagline_not_starts_with: String
  tagline_ends_with: String
  tagline_not_ends_with: String
  votesCount: Int
  votesCount_not: Int
  votesCount_in: [Int!]
  votesCount_not_in: [Int!]
  votesCount_lt: Int
  votesCount_lte: Int
  votesCount_gt: Int
  votesCount_gte: Int
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  day: String
  day_not: String
  day_in: [String!]
  day_not_in: [String!]
  day_lt: String
  day_lte: String
  day_gt: String
  day_gte: String
  day_contains: String
  day_not_contains: String
  day_starts_with: String
  day_not_starts_with: String
  day_ends_with: String
  day_not_ends_with: String
  featured: Boolean
  featured_not: Boolean
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  section(where: SectionWhereUniqueInput!): Section
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section]!
  sectionsConnection(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectionConnection!
  signedUpload(where: SignedUploadWhereUniqueInput!): SignedUpload
  signedUploads(where: SignedUploadWhereInput, orderBy: SignedUploadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SignedUpload]!
  signedUploadsConnection(where: SignedUploadWhereInput, orderBy: SignedUploadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SignedUploadConnection!
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  USER
}

type Section {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  date: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type SectionConnection {
  pageInfo: PageInfo!
  edges: [SectionEdge]!
  aggregate: AggregateSection!
}

input SectionCreateInput {
  id: ID
  date: String!
  posts: PostCreateManyInput
}

type SectionEdge {
  node: Section!
  cursor: String!
}

enum SectionOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
}

type SectionPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  date: String!
}

type SectionSubscriptionPayload {
  mutation: MutationType!
  node: Section
  updatedFields: [String!]
  previousValues: SectionPreviousValues
}

input SectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SectionWhereInput
  AND: [SectionSubscriptionWhereInput!]
  OR: [SectionSubscriptionWhereInput!]
  NOT: [SectionSubscriptionWhereInput!]
}

input SectionUpdateInput {
  date: String
  posts: PostUpdateManyInput
}

input SectionUpdateManyMutationInput {
  date: String
}

input SectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
}

input SectionWhereUniqueInput {
  id: ID
  date: String
}

type SignedUpload {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  signedRequest: String
  url: String
}

type SignedUploadConnection {
  pageInfo: PageInfo!
  edges: [SignedUploadEdge]!
  aggregate: AggregateSignedUpload!
}

input SignedUploadCreateInput {
  id: ID
  signedRequest: String
  url: String
}

type SignedUploadEdge {
  node: SignedUpload!
  cursor: String!
}

enum SignedUploadOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  signedRequest_ASC
  signedRequest_DESC
  url_ASC
  url_DESC
}

type SignedUploadPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  signedRequest: String
  url: String
}

type SignedUploadSubscriptionPayload {
  mutation: MutationType!
  node: SignedUpload
  updatedFields: [String!]
  previousValues: SignedUploadPreviousValues
}

input SignedUploadSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SignedUploadWhereInput
  AND: [SignedUploadSubscriptionWhereInput!]
  OR: [SignedUploadSubscriptionWhereInput!]
  NOT: [SignedUploadSubscriptionWhereInput!]
}

input SignedUploadUpdateInput {
  signedRequest: String
  url: String
}

input SignedUploadUpdateManyMutationInput {
  signedRequest: String
  url: String
}

input SignedUploadWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  signedRequest: String
  signedRequest_not: String
  signedRequest_in: [String!]
  signedRequest_not_in: [String!]
  signedRequest_lt: String
  signedRequest_lte: String
  signedRequest_gt: String
  signedRequest_gte: String
  signedRequest_contains: String
  signedRequest_not_contains: String
  signedRequest_starts_with: String
  signedRequest_not_starts_with: String
  signedRequest_ends_with: String
  signedRequest_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [SignedUploadWhereInput!]
  OR: [SignedUploadWhereInput!]
  NOT: [SignedUploadWhereInput!]
}

input SignedUploadWhereUniqueInput {
  id: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  section(where: SectionSubscriptionWhereInput): SectionSubscriptionPayload
  signedUpload(where: SignedUploadSubscriptionWhereInput): SignedUploadSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type Topic {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  name: String!
  slug: String!
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  followedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
  posts: PostCreateManyWithoutTopicsInput
  followedBy: UserCreateManyWithoutFollowedTopicsInput
  votes: VoteCreateManyInput
}

input TopicCreateManyWithoutFollowedByInput {
  create: [TopicCreateWithoutFollowedByInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutPostsInput {
  create: [TopicCreateWithoutPostsInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateWithoutFollowedByInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
  posts: PostCreateManyWithoutTopicsInput
  votes: VoteCreateManyInput
}

input TopicCreateWithoutPostsInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
  followedBy: UserCreateManyWithoutFollowedTopicsInput
  votes: VoteCreateManyInput
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  followersCount_ASC
  followersCount_DESC
  postsCount_ASC
  postsCount_DESC
  trending_ASC
  trending_DESC
}

type TopicPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  name: String!
  slug: String!
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
}

input TopicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  followersCount: Int
  followersCount_not: Int
  followersCount_in: [Int!]
  followersCount_not_in: [Int!]
  followersCount_lt: Int
  followersCount_lte: Int
  followersCount_gt: Int
  followersCount_gte: Int
  postsCount: Int
  postsCount_not: Int
  postsCount_in: [Int!]
  postsCount_not_in: [Int!]
  postsCount_lt: Int
  postsCount_lte: Int
  postsCount_gt: Int
  postsCount_gte: Int
  trending: Boolean
  trending_not: Boolean
  AND: [TopicScalarWhereInput!]
  OR: [TopicScalarWhereInput!]
  NOT: [TopicScalarWhereInput!]
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
  AND: [TopicSubscriptionWhereInput!]
  OR: [TopicSubscriptionWhereInput!]
  NOT: [TopicSubscriptionWhereInput!]
}

input TopicUpdateInput {
  name: String
  slug: String
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
  posts: PostUpdateManyWithoutTopicsInput
  followedBy: UserUpdateManyWithoutFollowedTopicsInput
  votes: VoteUpdateManyInput
}

input TopicUpdateManyDataInput {
  name: String
  slug: String
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
}

input TopicUpdateManyMutationInput {
  name: String
  slug: String
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
}

input TopicUpdateManyWithoutFollowedByInput {
  create: [TopicCreateWithoutFollowedByInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutFollowedByInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutFollowedByInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutPostsInput {
  create: [TopicCreateWithoutPostsInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutPostsInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutPostsInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateWithoutFollowedByDataInput {
  name: String
  slug: String
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
  posts: PostUpdateManyWithoutTopicsInput
  votes: VoteUpdateManyInput
}

input TopicUpdateWithoutPostsDataInput {
  name: String
  slug: String
  description: String
  image: String
  followersCount: Int
  postsCount: Int
  trending: Boolean
  followedBy: UserUpdateManyWithoutFollowedTopicsInput
  votes: VoteUpdateManyInput
}

input TopicUpdateWithWhereUniqueWithoutFollowedByInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutFollowedByDataInput!
}

input TopicUpdateWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutPostsDataInput!
}

input TopicUpsertWithWhereUniqueWithoutFollowedByInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutFollowedByDataInput!
  create: TopicCreateWithoutFollowedByInput!
}

input TopicUpsertWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutPostsDataInput!
  create: TopicCreateWithoutPostsInput!
}

input TopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  followersCount: Int
  followersCount_not: Int
  followersCount_in: [Int!]
  followersCount_not_in: [Int!]
  followersCount_lt: Int
  followersCount_lte: Int
  followersCount_gt: Int
  followersCount_gte: Int
  postsCount: Int
  postsCount_not: Int
  postsCount_in: [Int!]
  postsCount_not_in: [Int!]
  postsCount_lt: Int
  postsCount_lte: Int
  postsCount_gt: Int
  postsCount_gte: Int
  trending: Boolean
  trending_not: Boolean
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  followedBy_every: UserWhereInput
  followedBy_some: UserWhereInput
  followedBy_none: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
  slug: String
}

type User {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String
  role: Role
  name: String!
  avatar: String
  auth0id: String!
  identity: String
  privateKey: String
  address: String
  followedTopics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  role: Role
  name: String!
  avatar: String
  auth0id: String!
  identity: String
  privateKey: String
  address: String
  followedTopics: TopicCreateManyWithoutFollowedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateManyWithoutFollowedTopicsInput {
  create: [UserCreateWithoutFollowedTopicsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFollowedTopicsInput {
  id: ID
  email: String
  role: Role
  name: String!
  avatar: String
  auth0id: String!
  identity: String
  privateKey: String
  address: String
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  id: ID
  email: String
  role: Role
  name: String!
  avatar: String
  auth0id: String!
  identity: String
  privateKey: String
  address: String
  followedTopics: TopicCreateManyWithoutFollowedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
  auth0id_ASC
  auth0id_DESC
  identity_ASC
  identity_DESC
  privateKey_ASC
  privateKey_DESC
  address_ASC
  address_DESC
}

type UserPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String
  role: Role
  name: String!
  avatar: String
  auth0id: String!
  identity: String
  privateKey: String
  address: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  auth0id: String
  auth0id_not: String
  auth0id_in: [String!]
  auth0id_not_in: [String!]
  auth0id_lt: String
  auth0id_lte: String
  auth0id_gt: String
  auth0id_gte: String
  auth0id_contains: String
  auth0id_not_contains: String
  auth0id_starts_with: String
  auth0id_not_starts_with: String
  auth0id_ends_with: String
  auth0id_not_ends_with: String
  identity: String
  identity_not: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_lt: String
  identity_lte: String
  identity_gt: String
  identity_gte: String
  identity_contains: String
  identity_not_contains: String
  identity_starts_with: String
  identity_not_starts_with: String
  identity_ends_with: String
  identity_not_ends_with: String
  privateKey: String
  privateKey_not: String
  privateKey_in: [String!]
  privateKey_not_in: [String!]
  privateKey_lt: String
  privateKey_lte: String
  privateKey_gt: String
  privateKey_gte: String
  privateKey_contains: String
  privateKey_not_contains: String
  privateKey_starts_with: String
  privateKey_not_starts_with: String
  privateKey_ends_with: String
  privateKey_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  role: Role
  name: String
  avatar: String
  auth0id: String
  identity: String
  privateKey: String
  address: String
  followedTopics: TopicUpdateManyWithoutFollowedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  email: String
  role: Role
  name: String
  avatar: String
  auth0id: String
  identity: String
  privateKey: String
  address: String
}

input UserUpdateManyMutationInput {
  email: String
  role: Role
  name: String
  avatar: String
  auth0id: String
  identity: String
  privateKey: String
  address: String
}

input UserUpdateManyWithoutFollowedTopicsInput {
  create: [UserCreateWithoutFollowedTopicsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowedTopicsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowedTopicsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFollowedTopicsDataInput {
  email: String
  role: Role
  name: String
  avatar: String
  auth0id: String
  identity: String
  privateKey: String
  address: String
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  email: String
  role: Role
  name: String
  avatar: String
  auth0id: String
  identity: String
  privateKey: String
  address: String
  followedTopics: TopicUpdateManyWithoutFollowedByInput
}

input UserUpdateWithWhereUniqueWithoutFollowedTopicsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowedTopicsDataInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserUpsertWithWhereUniqueWithoutFollowedTopicsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowedTopicsDataInput!
  create: UserCreateWithoutFollowedTopicsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  auth0id: String
  auth0id_not: String
  auth0id_in: [String!]
  auth0id_not_in: [String!]
  auth0id_lt: String
  auth0id_lte: String
  auth0id_gt: String
  auth0id_gte: String
  auth0id_contains: String
  auth0id_not_contains: String
  auth0id_starts_with: String
  auth0id_not_starts_with: String
  auth0id_ends_with: String
  auth0id_not_ends_with: String
  identity: String
  identity_not: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_lt: String
  identity_lte: String
  identity_gt: String
  identity_gte: String
  identity_contains: String
  identity_not_contains: String
  identity_starts_with: String
  identity_not_starts_with: String
  identity_ends_with: String
  identity_not_ends_with: String
  privateKey: String
  privateKey_not: String
  privateKey_in: [String!]
  privateKey_not_in: [String!]
  privateKey_lt: String
  privateKey_lte: String
  privateKey_gt: String
  privateKey_gte: String
  privateKey_contains: String
  privateKey_not_contains: String
  privateKey_starts_with: String
  privateKey_not_starts_with: String
  privateKey_ends_with: String
  privateKey_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  followedTopics_every: TopicWhereInput
  followedTopics_some: TopicWhereInput
  followedTopics_none: TopicWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  auth0id: String
}

type Vote {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  user: User!
  post: Post!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  user: UserCreateOneWithoutVotesInput!
  post: PostCreateOneWithoutVotesInput!
}

input VoteCreateManyInput {
  create: [VoteCreateInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutPostInput {
  create: [VoteCreateWithoutPostInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutVotesInput!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
  post: PostUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateInput {
  user: UserUpdateOneRequiredWithoutVotesInput
  post: PostUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyInput {
  create: [VoteCreateInput!]
  update: [VoteUpdateWithWhereUniqueNestedInput!]
  upsert: [VoteUpsertWithWhereUniqueNestedInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutPostInput {
  create: [VoteCreateWithoutPostInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateWithoutPostDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  post: PostUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateDataInput!
}

input VoteUpdateWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutPostDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateDataInput!
  create: VoteCreateInput!
}

input VoteUpsertWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutPostDataInput!
  create: VoteCreateWithoutPostInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  user: UserWhereInput
  post: PostWhereInput
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    