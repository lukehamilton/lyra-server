# import Role from "./generated/prisma.graphql"
# import Post from "./generated/prisma.graphql"
# import Topic from "./generated/prisma.graphql"

type Query {
  # publishedPosts: [Post!]!
  # post(postId: ID!): Post
  # postsByUser(userId: ID!): [Post!]!
  posts(first: Int, skip: Int): [Post!]!
  topics: [Topic!]!
  sections(first: Int, skip: Int, after: String): [Section!]!
  me: User
}

type Mutation {
  authenticate(idToken: String!): User
  createTopic(name: String!, slug: String!): Topic
  createPost(
    name: String!
    slug: String!
    imageUrl: String!
    description: String!
    votesCount: Int
    commentsCount: Int
  ): Post
  # createProductTopic(productSlug: String!, topicSlug: String!): ProductTopic
  # createUser(name: String!): User
  # createDraft(title: String!, userId: ID!): Post
  # publish(postId: ID!): Post
  updateFollowedTopic(userId: ID!, topicId: ID!, following: Boolean): Topic
  # upvoteProduct(productId: ID!): ProductVote
}

type User {
  id: ID!
  email: String
  role: Role
  name: String
  avatar: String
  identity: String
  privateKey: String
  followedTopics: [Topic!]!
}

# type Topic {
#   id: ID!
#   name: String!
#   slug: String!
#   posts: [Product!]!
#   followedBy: [User!]!
# }

# type Product implements Post {
#   id: ID!
#   name: String!
#   slug: String!
#   imageUrl: String!
#   description: String!
#   votesCount: Int!
#   commentsCount: Int!
#   topics: [Topic!]!
#   votes: [Vote!]!
# }

# type Product {
#   id: ID!
#   name: String!
#   slug: String!
#   imageUrl: String!
#   description: String!
#   votesCount: Int!
#   commentsCount: Int!
#   productTopics: [ProductTopic!]!
# }
#
# type Topic {
#   id: ID!
#   name: String!
#   slug: String!
#   productTopics: [ProductTopic!]!
# }
#
# type ProductTopic {
#   id: ID!
#   product: Product!
#   topic: Topic!
# }
